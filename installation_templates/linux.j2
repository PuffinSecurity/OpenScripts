#!/bin/bash

GROUP_ID="${1:-default}"
AGENTNAME="$(uname)-$(hostname)"

# Replace these with actual values or export them as environment variables before running the script
export WAZUH_MANAGER="{{ PUFFIN_MANAGER }}"
export WAZUH_MANAGER_PORT="{{ PUFFIN_MANAGER_PORT }}"
export WAZUH_AGENT_GROUP="$GROUP_ID"
KEY_URL="https://download.mdr.puffinsecurity.com/register/{{ CLIENT_ID }}?group=$GROUP_ID&name=$AGENTNAME"

KEYS_FILE_PATH="/var/ossec/etc/client.keys"

# Function to check if the script is run as root
check_root() {
    echo "Checking for root access..."  >&2
    if [ "$EUID" -ne 0 ]; then 
        echo "Please run as root or use sudo"  >&2
        exit 1
    fi
}

# Function to check if Wazuh is already installed and install it if not
check_and_install() {
    if systemctl is-active --quiet wazuh-agent; then
        echo "Puffin agent is already installed. Exiting." >&2
        exit 0
    else
        echo "Puffin agent not found. Downloading package..." >&2
        DOWNLOADED_PATH=$(download_agent)
        if [ -z "$DOWNLOADED_PATH" ]; then
            echo "Download failed. Installation cannot proceed." >&2
            exit 1
        fi
        
        echo "Installing Puffin agent..." >&2
        if [[ $DOWNLOADED_PATH == *.deb ]]; then
            dpkg -i --force-all "$DOWNLOADED_PATH" || apt-get install -fy
        elif [[ $DOWNLOADED_PATH == *.rpm ]]; then
            dnf install -y "$DOWNLOADED_PATH" || dnf install -y
        fi

        rm "$DOWNLOADED_PATH"

        # Assuming the KEY is set and valid
        echo "Installing agent key..." >&2
        yes | /var/ossec/bin/manage_agents -i "${KEY}"
    fi
}




# Function to restart the Wazuh service
restart_service() {
    echo "Restarting Puffin service..." >&2
    systemctl restart wazuh-agent
}

# Function to only download the Wazuh agent package based on the system's OS and architecture
download_agent() {
    echo "Determining machine OS and architecture..." >&2
    ARCH=$(uname -m)
    OS=$(uname -s)
    echo "OS is $OS, Architecture is $ARCH" >&2

    if [ "$OS" = "Linux" ]; then
        if [ "$ARCH" = "x86_64" ]; then
            ARCH="amd64"
        elif [ "$ARCH" = "aarch64" ]; then
            ARCH="arm64"
        else
            echo "Unsupported architecture." >&2
            return 1
        fi

        if [ -f /etc/debian_version ]; then
            PACKAGE="wazuh-agent_4.7.0-1_${ARCH}.deb"
            DOWNLOAD_URL="https://packages.wazuh.com/4.x/apt/pool/main/w/wazuh-agent/${PACKAGE}"
        elif [ -f /etc/redhat-release ]; then
            PACKAGE="wazuh-agent-4.7.0-1.${ARCH}.rpm"
            DOWNLOAD_URL="https://packages.wazuh.com/4.x/yum/${PACKAGE}"
        else
            echo "Unsupported OS." >&2
            return 1
        fi

        TEMP_DIR=$(mktemp -d)
        echo "Temporary directory created at: $TEMP_DIR" >&2
        echo "Downloading $PACKAGE from $DOWNLOAD_URL" >&2

        pushd "$TEMP_DIR" > /dev/null
        if curl -O "${DOWNLOAD_URL}"; then
            PACKAGE_PATH="$TEMP_DIR/$PACKAGE"
            echo "Download successful: $PACKAGE_PATH" >&2
            popd > /dev/null
            echo "$PACKAGE_PATH"
        else
            echo "Failed to download the package." >&2
            popd > /dev/null
            rmdir "$TEMP_DIR"
            return 1
        fi
    else
        echo "Unsupported OS." >&2
        return 1
    fi
}


# Function to retrieve the agent key
retrieve_key() {
    echo "Retrieving agent key from $KEY_URL" >&2
    KEY=$(curl -s $KEY_URL)
    if [ -z "$KEY" ]; then
        echo "Cannot retrieve key from server" >&2
        exit 1
    fi

    # Attempt to decode the base64 key to verify it's valid
    if ! echo "$KEY" | base64 --decode &> /dev/null; then
        echo "Failed to get a valid key" >&2
        exit 1
    fi

    echo $KEY
}



# Main function that orchestrates the steps
main() {
    check_root

    if [ ! -f "$KEYS_FILE_PATH" ]; then
        echo "Agent key file not found. Retrieving key..."  >&2
        KEY=$(retrieve_key) || exit 1
        echo "KEY: $KEY"
    fi

    check_and_install
    restart_service

    echo "Puffin agent installation complete."
}

# Start the main function
main

# Return to the original directory
cd -
